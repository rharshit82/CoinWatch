// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: alerts.sql

package database

import (
	"context"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO "Alerts" (
  user_id, crypto, price, direction
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, crypto, price, direction, status, created_at
`

type CreateAlertParams struct {
	UserID    int64   `json:"user_id"`
	Crypto    string  `json:"crypto"`
	Price     float64 `json:"price"`
	Direction bool    `json:"direction"`
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.db.QueryRow(ctx, createAlert,
		arg.UserID,
		arg.Crypto,
		arg.Price,
		arg.Direction,
	)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Crypto,
		&i.Price,
		&i.Direction,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAlertByID = `-- name: GetAlertByID :one
SELECT id, user_id, crypto, price, direction, status, created_at FROM "Alerts" 
WHERE "id" = $1
`

func (q *Queries) GetAlertByID(ctx context.Context, id int64) (Alert, error) {
	row := q.db.QueryRow(ctx, getAlertByID, id)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Crypto,
		&i.Price,
		&i.Direction,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAlertsByStatus = `-- name: GetAlertsByStatus :many
SELECT id, user_id, crypto, price, direction, status, created_at FROM "Alerts" 
WHERE "user_id" = $1 AND "status" = $2
LIMIT $3
OFFSET $4
`

type GetAlertsByStatusParams struct {
	UserID int64  `json:"user_id"`
	Status string `json:"status"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetAlertsByStatus(ctx context.Context, arg GetAlertsByStatusParams) ([]Alert, error) {
	rows, err := q.db.Query(ctx, getAlertsByStatus,
		arg.UserID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Crypto,
			&i.Price,
			&i.Direction,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAlerts = `-- name: GetAllAlerts :many
SELECT id, user_id, crypto, price, direction, status, created_at FROM "Alerts" 
WHERE "user_id" = $1
LIMIT $2
OFFSET $3
`

type GetAllAlertsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAlerts(ctx context.Context, arg GetAllAlertsParams) ([]Alert, error) {
	rows, err := q.db.Query(ctx, getAllAlerts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Crypto,
			&i.Price,
			&i.Direction,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlert = `-- name: UpdateAlert :one
UPDATE "Alerts" SET
  crypto = $2,
  price = $3,
  direction = $4
WHERE "id" = $1
RETURNING id, user_id, crypto, price, direction, status, created_at
`

type UpdateAlertParams struct {
	ID        int64   `json:"id"`
	Crypto    string  `json:"crypto"`
	Price     float64 `json:"price"`
	Direction bool    `json:"direction"`
}

func (q *Queries) UpdateAlert(ctx context.Context, arg UpdateAlertParams) (Alert, error) {
	row := q.db.QueryRow(ctx, updateAlert,
		arg.ID,
		arg.Crypto,
		arg.Price,
		arg.Direction,
	)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Crypto,
		&i.Price,
		&i.Direction,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateAlertStatus = `-- name: UpdateAlertStatus :exec
UPDATE "Alerts" SET
  status = $2
WHERE "id" = $1
`

type UpdateAlertStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateAlertStatus(ctx context.Context, arg UpdateAlertStatusParams) error {
	_, err := q.db.Exec(ctx, updateAlertStatus, arg.ID, arg.Status)
	return err
}
